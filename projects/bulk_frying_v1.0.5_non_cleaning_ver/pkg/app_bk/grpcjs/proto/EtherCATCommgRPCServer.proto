syntax = "proto3";
package GRPCECat; //

service GRPCECatTask {
    // Master and slave status
    rpc GetMasterStatus(Empty) returns (IntVal) {}
    rpc GetSlaveStatus(Empty) returns (IntVals) {}
    rpc GetRxDomainStatus(Empty) returns (IntVal) {}
    rpc GetTxDomainStatus(Empty) returns (IntVal) {}
    rpc IsSystemReady(Empty) returns (IntVals) {}
    rpc IsServoOn(Empty) returns (IntVals) {}
    rpc SetServoOnOff(ServoIndex) returns (Empty) {}

    // Read and Write PDOs (Motor Driver)
    rpc SetRxPDOMotorDriver(MotorDriverRxIndex) returns (Empty) {}
    rpc GetRxPDOMotorDriver(IntVal) returns (MotorDriverRx) {}
    rpc GetTxPDOMotorDriver(IntVal) returns (MotorDriverTx) {}
    rpc SetExtendedPositionZero(Empty) returns (Empty) {}
    rpc GetMotorDriverDIs(IntVal) returns (IntVal) {}
    rpc GetErrorCode(IntVal) returns (IntVal) {}
    rpc GetMaxTorque(IntVal) returns (IntVal) {}
    rpc GetMaxMotorSpeed(IntVal) returns (IntVal) {}

    // Read and Write PDOs (Neuromeka IO board)
    rpc SetNRMKIOBoardOutput(IOBoardRx) returns (Empty) {}
    rpc GetNRMKIOBoardInput(Empty) returns (IOBoardTx) {}
    rpc GetNRMKIOBoardOutput(Empty) returns (IOBoardRx) {}

    // Read and Write PDOs (Beckhoff)
    rpc GetDI(IntVal) returns (DIList) {}

    // Read and Write PDOs (Robotus FT sensor)
    rpc GetRobotusFTSensor(IntVal) returns (RobotusFTTx) {}

    // Motor drive control
    rpc ResetWelconDriver(IntVal) returns (Empty) {}

    // Read and Write SDOs
    rpc GetCOREErrorCodeSDO(IntVal) returns (IntVal) {}
    rpc GetCORETemperature1SDO(IntVal) returns (FloatVal) {}
    rpc GetCORETemperature2SDO(IntVal) returns (FloatVal) {}
    rpc GetCORETemperature3SDO(IntVal) returns (FloatVal) {}
    rpc GetNRMKFWVersionSDO(IntVal) returns (StringVal) {}

    rpc GetMaxTorqueSDO(IntVal) returns (IntVal) {}
    rpc GetProfileVelocitySDO(IntVal) returns (IntVal) {}
    rpc GetProfileAccSDO(IntVal) returns (IntVal) {}
    rpc GetProfileDecSDO(IntVal) returns (IntVal) {}


}


message Empty {
}

// Servo state
message ServoIndex {
    int32 ecatIndex = 1;
    bool servoState = 2;
}

// Motor driver
message MotorDriverTx {
    uint32 statusWord = 1;
    int32 modeOpDisp = 2;
    int32 actualPosition = 3;
    int32 actualVelocity = 4;
    int32 actualTorque = 5;
}

message MotorDriverRx {
    uint32 controlWord = 1;
    int32 modeOp = 2;
    int64 targetPosition = 3;
    int32 targetVelocity = 4;
    int32 targetTorque = 5;
}


message PanasonicDriverTx {
    uint32 statusWord = 1;
    int32 modeOpDisp = 2;
    int32 actualPosition = 3;
    int32 actualVelocity = 4;
    int32 actualTorque = 5;
    uint32 errorCode = 6;
}

message PanasonicDriverRx {
    uint32 controlWord = 1;
    int32 modeOp = 2;
    int32 targetPosition = 3;
    int32 targetVelocity = 4;
    int32 targetTorque = 5;
    int32 maxTorque = 6;
    int32 maxMotorSpeed = 7;
    int32 touchProbe = 8;
}

message MotorDriverTxIndex {
    uint32 slaveIdx = 1;
    MotorDriverTx motorDriverTx = 2;
}

message MotorDriverRxIndex {
    uint32 slaveIdx = 1;
    MotorDriverRx motorDriverRx = 2;
}



// Neuromeka IO Board
message FTsensorTx {
    int32 fx = 1;
    int32 fy = 2;
    int32 fz = 3;
    int32 tx = 4;
    int32 ty = 5;
    int32 tz = 6;
}

message IOBoardTx {
    uint32 di_5v = 1;
    uint32 di1 = 2;
    uint32 di2 = 3;
    uint32 ai1 = 4;
    uint32 ai2 = 5;
    FTsensorTx ft_sensor = 6;
}

message IOBoardRx {
    uint32 do_5v = 1;
    uint32 do1 = 2;
    uint32 do2 = 3;
    uint32 ao1 = 4;
    uint32 ao2 = 5;
    uint32 ft_param = 6;
}




message DIList {
    int32 idx = 1;
    repeated int32 di_list = 2;
}


message RobotusFTTx {
    float fx = 1;
    float fy = 2;
    float fz = 3;
    float tx = 4;
    float ty = 5;
    float tz = 6;
}


message TargetPos {
    int32 idx = 1;
    float pos = 2;
}


// Common use
message IntVal {
    int32 val = 1;
}

message IntVals {
    repeated int32 val = 1;
}

message FloatVal {
    float val = 1;
}

message FloatVals {
    repeated float val = 1;
}

message StringVal {
    string val = 1;
}

message DoubleVals {
    repeated double val = 1;
}

message VelAccBoundary {
    int32 idx = 1;
    float vmax = 2;
    float amax = 3;
}